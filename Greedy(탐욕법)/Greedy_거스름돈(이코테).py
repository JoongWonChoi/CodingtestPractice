###Greedy_거스름돈(코드업)###

## my algorithm ##
#입력된 거스름돈 n을 우리나라에 존재하는 10원 이상의 화폐로, 최소한의 횟수로 거슬러주기
#당연하게 처음 든 생각은 반복문 사용이었다. n이 10원 이상일때까지 거슬러주며 반복을 진행하는 알고리즘을 생각하였다.
#if - elif 로 진행하며 여러 조건문으로 진행하는 방식이다.
#그런데 어쩌다보니, 반복문을 진행하지 않고 상수횟수로 답을 낼 수 있다는 것을 깨달았다.
#아주 기본적인 개념이었는데 내가 그동안 몰랐던 부분이었다. 코딩한지 1년만에 아주 기본적인 개념을 지금에서야 알아낸것이다.
#if - elif는 말 그대로, if문에 조건이 부합하지 않아야 else if, 그 다음 조건으로 탐색하는 것이다.
#그런데 단순히 if - if - if .. 이런 식으로 if문을 여러개 설정해놓으면, 선행되는 if문에 조건이 부합하지 않더라도, 그 다음 if문도 온전한 조건문 중 하나이기에 꼭 거쳐야 하는 조건 관문인 것이다.
#이러한 사소한 문법 개념 하나로 어쩌면 수 십배 수 백배도 늘어날 수 있느 시간을 단지 상수 횟수로 끝낼 수 있는 것이다.
#아주 작은 발견으로 크게 소요 시간을 줄이고 효율성을 높일 수 있어서 매우 기분이 좋고 행복하다!!

##시간복잡도##
#n = 거스름돈
#반복 없이, 조건문(if-if-if..)여러개를 달아줌으로써 문제 해결
#worst case : O(1)


def exchange(n):
    answer = 0
    #반복 없이 온전한 if문들로 구성!! -> 선행되는 반복에 부합하든 아니든 반드시 다음 나타나는 조건문도 거쳐야함..!
    if n>=50000:
        answer += n//50000
        n %= 50000
    if n>=10000:
        answer += n//10000
        n %= 10000
    if n>=5000:
        answer += n//5000
        n %= 5000
    if n>=1000:
        answer += n//1000
        n %= 1000
    if n>=500:
        answer += n//500
        n %= 500
    if n>=100:
        answer += n//100
        n %= 100
    if n>=50:
        answer += n//50
        n %= 50
    if n>=10:
        answer += n//10
        n %= 10
    return answer


n = int(input())
print(exchange(n))